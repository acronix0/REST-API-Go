// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/acronix0/REST-API-Go/internal/domain"
	repository "github.com/acronix0/REST-API-Go/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUser) ChangePassword(ctx context.Context, userId int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userId, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserMockRecorder) ChangePassword(ctx, userId, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUser)(nil).ChangePassword), ctx, userId, newPassword)
}

// Create mocks base method.
func (m *MockUser) Create(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx, user)
}

// GetByCredentials mocks base method.
func (m *MockUser) GetByCredentials(ctx context.Context, email, passwordHash string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, email, passwordHash)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockUserMockRecorder) GetByCredentials(ctx, email, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockUser)(nil).GetByCredentials), ctx, email, passwordHash)
}

// GetByEmail mocks base method.
func (m *MockUser) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUser)(nil).GetByEmail), ctx, email)
}

// GetById mocks base method.
func (m *MockUser) GetById(ctx context.Context, id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUser)(nil).GetById), ctx, id)
}

// GetRoleByUserID mocks base method.
func (m *MockUser) GetRoleByUserID(ctx context.Context, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByUserID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByUserID indicates an expected call of GetRoleByUserID.
func (mr *MockUserMockRecorder) GetRoleByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByUserID", reflect.TypeOf((*MockUser)(nil).GetRoleByUserID), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockUser) GetUsers(ctx context.Context) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUser)(nil).GetUsers), ctx)
}

// Login mocks base method.
func (m *MockUser) Login(ctx context.Context, email, passwordHash string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, passwordHash)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserMockRecorder) Login(ctx, email, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUser)(nil).Login), ctx, email, passwordHash)
}

// Update mocks base method.
func (m *MockUser) Update(ctx context.Context, user repository.UpdateUserInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), ctx, user)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// DeleteAllRefreshTokens mocks base method.
func (m *MockAuth) DeleteAllRefreshTokens(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRefreshTokens", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllRefreshTokens indicates an expected call of DeleteAllRefreshTokens.
func (mr *MockAuthMockRecorder) DeleteAllRefreshTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRefreshTokens", reflect.TypeOf((*MockAuth)(nil).DeleteAllRefreshTokens), ctx, userID)
}

// DeleteRefreshToken mocks base method.
func (m *MockAuth) DeleteRefreshToken(ctx context.Context, userID int, deviceInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, userID, deviceInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockAuthMockRecorder) DeleteRefreshToken(ctx, userID, deviceInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockAuth)(nil).DeleteRefreshToken), ctx, userID, deviceInfo)
}

// SaveRefreshToken mocks base method.
func (m *MockAuth) SaveRefreshToken(ctx context.Context, userID int, refreshToken string, expiresAt time.Time, deviceInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", ctx, userID, refreshToken, expiresAt, deviceInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockAuthMockRecorder) SaveRefreshToken(ctx, userID, refreshToken, expiresAt, deviceInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockAuth)(nil).SaveRefreshToken), ctx, userID, refreshToken, expiresAt, deviceInfo)
}

// ValidateRefreshToken mocks base method.
func (m *MockAuth) ValidateRefreshToken(ctx context.Context, userID int, refreshToken string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", ctx, userID, refreshToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockAuthMockRecorder) ValidateRefreshToken(ctx, userID, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockAuth)(nil).ValidateRefreshToken), ctx, userID, refreshToken)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// CreateOrUpdateBatch mocks base method.
func (m *MockProduct) CreateOrUpdateBatch(ctx context.Context, products []domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateBatch", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateBatch indicates an expected call of CreateOrUpdateBatch.
func (mr *MockProductMockRecorder) CreateOrUpdateBatch(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateBatch", reflect.TypeOf((*MockProduct)(nil).CreateOrUpdateBatch), ctx, products)
}

// GetByArticles mocks base method.
func (m *MockProduct) GetByArticles(ctx context.Context, articles []string) (map[string]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArticles", ctx, articles)
	ret0, _ := ret[0].(map[string]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArticles indicates an expected call of GetByArticles.
func (mr *MockProductMockRecorder) GetByArticles(ctx, articles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArticles", reflect.TypeOf((*MockProduct)(nil).GetByArticles), ctx, articles)
}

// GetByCredentials mocks base method.
func (m *MockProduct) GetByCredentials(ctx context.Context, query domain.GetProductsQuery) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, query)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockProductMockRecorder) GetByCredentials(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockProduct)(nil).GetByCredentials), ctx, query)
}

// GetProducts mocks base method.
func (m *MockProduct) GetProducts(ctx context.Context) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProduct)(nil).GetProducts), ctx)
}

// MockCategory is a mock of Category interface.
type MockCategory struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryMockRecorder
}

// MockCategoryMockRecorder is the mock recorder for MockCategory.
type MockCategoryMockRecorder struct {
	mock *MockCategory
}

// NewMockCategory creates a new mock instance.
func NewMockCategory(ctrl *gomock.Controller) *MockCategory {
	mock := &MockCategory{ctrl: ctrl}
	mock.recorder = &MockCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategory) EXPECT() *MockCategoryMockRecorder {
	return m.recorder
}

// CreateBatch mocks base method.
func (m *MockCategory) CreateBatch(ctx context.Context, category []domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockCategoryMockRecorder) CreateBatch(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockCategory)(nil).CreateBatch), ctx, category)
}

// CreateOrUpdateBatch mocks base method.
func (m *MockCategory) CreateOrUpdateBatch(ctx context.Context, category []domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateBatch", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateBatch indicates an expected call of CreateOrUpdateBatch.
func (mr *MockCategoryMockRecorder) CreateOrUpdateBatch(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateBatch", reflect.TypeOf((*MockCategory)(nil).CreateOrUpdateBatch), ctx, category)
}

// GetByArticles mocks base method.
func (m *MockCategory) GetByArticles(ctx context.Context, articles []string) (map[string]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArticles", ctx, articles)
	ret0, _ := ret[0].(map[string]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArticles indicates an expected call of GetByArticles.
func (mr *MockCategoryMockRecorder) GetByArticles(ctx, articles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArticles", reflect.TypeOf((*MockCategory)(nil).GetByArticles), ctx, articles)
}

// GetCategories mocks base method.
func (m *MockCategory) GetCategories(ctx context.Context) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockCategoryMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockCategory)(nil).GetCategories), ctx)
}

// UpdateBatch mocks base method.
func (m *MockCategory) UpdateBatch(ctx context.Context, category []domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockCategoryMockRecorder) UpdateBatch(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockCategory)(nil).UpdateBatch), ctx, category)
}

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrder) Create(ctx context.Context, order repository.CreateOrderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderMockRecorder) Create(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrder)(nil).Create), ctx, order)
}

// GetByUserId mocks base method.
func (m *MockOrder) GetByUserId(ctx context.Context, userId int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockOrderMockRecorder) GetByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockOrder)(nil).GetByUserId), ctx, userId)
}
